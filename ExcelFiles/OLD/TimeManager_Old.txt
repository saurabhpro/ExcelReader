
package jxcel.OLD;

import java.text.ParseException;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;

/**
 * Created by SaurabhK on 09-02-2016.
 */
public class TimeManager_Old {

    static final int MINUTES_PER_HOUR = 60;
    static final int SECONDS_PER_MINUTE = 60;
    static final int SECONDS_PER_HOUR = SECONDS_PER_MINUTE * MINUTES_PER_HOUR;

    public static void calculateTimeDifference(LocalTime s1, LocalTime s2, LocalDate date) {
        try {
            if (s1 != null && s2 != null) {
              /*  StringTokenizer st = new StringTokenizer(s1, ":");
                int hr1 = Integer.parseInt((String) st.nextElement());
                int min1 = Integer.parseInt((String) st.nextElement());

                st = new StringTokenizer(s2, ":");
                int hr2 = Integer.parseInt((String) st.nextElement());
                int min2 = Integer.parseInt((String) st.nextElement());
*/
                LocalDate froDate, toDate;
                froDate = toDate = date;

                if (s2.compareTo(s1) < 0)
                    toDate = froDate.plusDays(1);

                LocalDateTime fromDateTime = LocalDateTime.of(froDate, s1);
                LocalDateTime toDateTime = LocalDateTime.of(toDate, s2);


                LocalTime time;
                // if(  fromDateTime.compareTo(toDateTime) == 0)
                time = getTime(fromDateTime, toDateTime);

           /*      long time[] = getTime(fromDateTime, toDateTime);

               String hours = "" + time[0];
                String minutes = "" + time[1];
                if (time[0] < 10 && time[0] >= 0)
                    hours = "0" + time[0];

                if (time[1] < 10 && time[1] >= 0)
                    minutes = "0" + time[1];*/
                System.out.println(time);
            }
        } catch (Exception e) {//this generic but you can control another types of exception
        }
    }

    private static LocalTime getTime(LocalDateTime fromDateTime, LocalDateTime toDateTime) throws ParseException {
      /*  LocalDateTime today = LocalDateTime.of(toDateTime.getYear(),
                toDateTime.getMonthValue(), toDateTime.getDayOfMonth(), fromDateTime.getHour(), fromDateTime.getMinute());
       */
        Duration duration = Duration.between(fromDateTime, toDateTime);

        long seconds = duration.getSeconds();

        long hours = seconds / SECONDS_PER_HOUR;
        long minutes = ((seconds % SECONDS_PER_HOUR) / SECONDS_PER_MINUTE);
        long secs = (seconds % SECONDS_PER_MINUTE);
/*
        long minutes = ChronoUnit.MINUTES.between(fromDateTime, toDateTime);
        long hours = ChronoUnit.HOURS.between(fromDateTime, toDateTime);
        System.out.println(hours+":"+minutes);*/

        return convertToTime(hours, minutes);
        // return new long[]{hours, minutes, secs};
    }

    private static LocalTime convertToTime(long hr, long min) {
        return LocalTime.of((int) hr, (int) min);
    }
}
